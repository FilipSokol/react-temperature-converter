{"version":3,"sources":["components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["TemperatureField","temperature","scale","onTemperatureChange","value","type","onChange","e","target","convertTemperature","targetUnit","Math","round","TempZone","className","Calculator","useState","temperatureC","setTemperatureC","temperatureF","setTemperatureF","t","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEMA,EAAmB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,oBAC9C,OACE,uBACEC,MAAOH,EACPI,KAAK,SACLH,MAAOA,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAoBI,EAAEC,OAAOJ,WAK9CK,EAAqB,SAACR,EAAaS,GACvC,MAAoB,KAAhBT,EACoB,GAEL,MAAfS,EACKC,KAAKC,MAAqC,KAAf,EAAdX,EAAmB,EAAI,KAAc,IAExC,MAAfS,EACKC,KAAKC,MAA6B,GAApBX,EAAc,IAAW,EAAK,KAAQ,SAD7D,GAKIY,EAAW,SAAC,GAAqB,IAAnBZ,EAAkB,EAAlBA,YAClB,OAAIA,GAAe,IACV,mBAAGa,UAAU,MAAb,0BACEb,EAAc,EAChB,mBAAGa,UAAU,OAAb,0BAEA,mBAAGA,UAAU,SAAb,2BAwCIC,EApCI,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBAChBC,EADgB,KACFC,EADE,OAEiBF,mBAAS,IAF1B,mBAEhBG,EAFgB,KAEFC,EAFE,KAIvB,OACE,sBAAKN,UAAU,YAAf,UACE,sBAAKA,UAAU,eAAf,UACE,8DACA,cAAC,EAAD,CACEb,YAAagB,EACbf,MAAM,IACNC,oBAAqB,SAACkB,GACpBH,EAAgBG,GAChBD,EAAgBX,EAAmBY,EAAG,YAK5C,sBAAKP,UAAU,kBAAf,UACE,iEACA,cAAC,EAAD,CACEb,YAAakB,EACbjB,MAAM,IACNC,oBAAqB,SAACkB,GACpBD,EAAgBC,GAChBH,EAAgBT,EAAmBY,EAAG,YAI5C,8BACE,cAAC,EAAD,CAAUpB,YAAagB,UCpDhBK,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCISS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.103337af.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst TemperatureField = ({ temperature, scale, onTemperatureChange }) => {\n  return (\n    <input\n      value={temperature}\n      type=\"number\"\n      scale={scale}\n      onChange={(e) => onTemperatureChange(e.target.value)}\n    />\n  );\n};\n\nconst convertTemperature = (temperature, targetUnit) => {\n  if (temperature === \"\") {\n    return (temperature = \"\");\n  }\n  if (targetUnit === \"f\") {\n    return Math.round(((temperature * 9) / 5 + 32) * 1000) / 1000;\n  }\n  if (targetUnit === \"c\") {\n    return Math.round((((temperature - 32) * 5) / 9) * 1000) / 1000;\n  }\n};\n\nconst TempZone = ({ temperature }) => {\n  if (temperature >= 100) {\n    return <p className=\"hot\">ðŸ”¥</p>;\n  } else if (temperature < 0) {\n    return <p className=\"cold\">ðŸ¥¶</p>;\n  } else {\n    return <p className=\"normal\">ðŸ’¤</p>;\n  }\n};\n\nconst Calculator = () => {\n  const [temperatureC, setTemperatureC] = useState(\"\");\n  const [temperatureF, setTemperatureF] = useState(\"\");\n\n  return (\n    <div className=\"container\">\n      <div className=\"temp-celcius\">\n        <p>Enter Temperature in Celsius:</p>\n        <TemperatureField\n          temperature={temperatureC}\n          scale=\"c\"\n          onTemperatureChange={(t) => {\n            setTemperatureC(t);\n            setTemperatureF(convertTemperature(t, \"f\"));\n          }}\n        />\n      </div>\n\n      <div className=\"temp-fahrenheit\">\n        <p>Enter Temperature in Fahrenheit:</p>\n        <TemperatureField\n          temperature={temperatureF}\n          scale=\"f\"\n          onTemperatureChange={(t) => {\n            setTemperatureF(t);\n            setTemperatureC(convertTemperature(t, \"c\"));\n          }}\n        />\n      </div>\n      <div>\n        <TempZone temperature={temperatureC} />\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}