{"version":3,"sources":["components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["TemperatureField","temperature","scale","onTemperatureChange","value","type","onChange","e","target","ConvertTemperature","to","input","parseFloat","Number","isNaN","Math","round","TempZones","className","Calculator","useState","temperatureC","setTemperatureC","temperatureF","setTemperatureF","t","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEUA,EAAmB,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,oBAC3C,OACI,uBACAC,MAASH,EACTI,KAAO,SACPH,MAASA,EACTI,SAAY,SAACC,GAAD,OAAOJ,EAAoBI,EAAEC,OAAOJ,WAKlDK,EAAqB,SAACR,EAAaS,GACrC,IAAMC,EAAQC,WAAWX,GACrB,OAAIY,OAAOC,MAAMH,GACV,GAGA,MAAPD,EAA4B,EAAdT,EAAkB,EAAK,GAAMc,KAAKC,MAA4B,GAApBf,EAAc,IAAU,EAAK,KAAQ,KAI/FgB,EAAY,SAAC,GAAmB,IAAlBhB,EAAiB,EAAjBA,YAChB,OAAIA,GAAe,IACR,mBAAGiB,UAAY,MAAf,0BAEFjB,EAAc,EACZ,mBAAGiB,UAAY,OAAf,0BAEJ,mBAAGA,UAAY,SAAf,2BA6CAC,EA1CQ,WAAO,IAAD,EAEmBC,mBAAS,IAF5B,mBAEdC,EAFc,KAEAC,EAFA,OAGmBF,mBAAS,IAH5B,mBAGdG,EAHc,KAGAC,EAHA,KAKzB,OACI,sBAAKN,UAAU,YAAf,UAEI,sBAAKA,UAAU,eAAf,UACA,8DACA,cAAC,EAAD,CACAjB,YAAeoB,EACfnB,MAAQ,IACRC,oBAAuB,SAACsB,GACpBH,EAAgBG,GAChBD,EAAgBf,EAAmBgB,EAAG,YAK1C,sBAAKP,UAAU,kBAAf,UACA,iEACA,cAAC,EAAD,CACAjB,YAAesB,EACfrB,MAAQ,IACRC,oBAAuB,SAACsB,GACpBD,EAAgBC,GAChBH,EAAgBb,EAAmBgB,EAAG,YAK1C,8BACI,cAAC,EAAD,CACAxB,YAAeoB,UCtDhBK,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCISS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9ea99e5e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n    const TemperatureField = ({temperature, scale, onTemperatureChange}) => {\r\n        return(\r\n            <input \r\n            value = {temperature}\r\n            type = \"number\" \r\n            scale = {scale}\r\n            onChange = {(e) => onTemperatureChange(e.target.value)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const ConvertTemperature = (temperature, to) => {\r\n        const input = parseFloat(temperature);\r\n            if (Number.isNaN(input)) {\r\n            return '';\r\n        }\r\n        return ( \r\n            to === \"f\" ? (temperature * 9 / 5) + 32  : Math.round(((temperature - 32) * 5 / 9) * 1000) / 1000\r\n        );\r\n    }\r\n\r\n    const TempZones = ({temperature}) => {\r\n        if (temperature >= 100) {\r\n            return <p className = \"hot\">ðŸ”¥</p>;\r\n        }\r\n        else if (temperature < 0) {\r\n            return <p className = \"cold\">ðŸ¥¶</p>;\r\n        }\r\n        return <p className = \"normal\">ðŸ’¤</p>;\r\n      }\r\n\r\n    const Calculator = () => {\r\n\r\n        const [temperatureC, setTemperatureC] = useState(\"\");\r\n        const [temperatureF, setTemperatureF] = useState(\"\");\r\n\r\n    return(\r\n        <div className=\"container\">\r\n\r\n            <div className=\"temp-celcius\">\r\n            <p>Enter Temperature in Celsius:</p>\r\n            <TemperatureField \r\n            temperature = {temperatureC} \r\n            scale = \"c\" \r\n            onTemperatureChange = {(t) => {\r\n                setTemperatureC(t);\r\n                setTemperatureF(ConvertTemperature(t, \"f\"));\r\n            }} \r\n            />\r\n            </div>\r\n\r\n            <div className=\"temp-fahrenheit\">\r\n            <p>Enter Temperature in Fahrenheit:</p>\r\n            <TemperatureField \r\n            temperature = {temperatureF} \r\n            scale = \"f\"  \r\n            onTemperatureChange = {(t) => {\r\n                setTemperatureF(t);\r\n                setTemperatureC(ConvertTemperature(t, \"c\"));\r\n            }} \r\n            />\r\n            </div>\r\n\r\n            <div>\r\n                <TempZones \r\n                temperature = {temperatureC}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\n\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}